# -*- coding: utf-8 -*-
"""Sudoku w/Backtracking.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Re1KqW8-1p9RYNooRg9v2kr3NHfwb-T7
"""

from collections import defaultdict
import time

class Sudoku:
  def __init__(self):
    self.grid = self.create_grid()

  def create_grid(self):
    new_grid = [["5","3",".",".","7",".",".",".","."],
                ["6",".",".","1","9","5",".",".","."],
                [".","9","8",".",".",".",".","6","."],
                ["8",".",".",".","6",".",".",".","3"],
                ["4",".",".","8",".","3",".",".","1"],
                ["7",".",".",".","2",".",".",".","6"],
                [".","6",".",".",".",".","2","8","."],
                [".",".",".","4","1","9",".",".","5"],
                [".",".",".",".","8",".",".","7","9"]]

    return new_grid 

  def intro(self):
    print("Hello World!")
    print("-------Sudoku-------")
    print()
    print()
  """
  def check_game(self):
    check = defaultdict(int)
    for i in range(len(self.grid)):
      for j in range(len(self.grid)):
        current_val = self.grid[i][j]
        if current_val != '.':
          check[str(current_val) + " in Row : " + str(i)] += 1
          check[str(current_val) + " in Col : " + str(j)] += 1
          check[str(current_val) +  " in Box : " + str(i//3) + " " + str(j//3)] += 1
          #print(check)
          if check[str(current_val) + " in Row : " + str(i)] > 1 or check[str(current_val) + " in Col : " + str(j)] > 1 or check[str(current_val) +  " in Box : " + str(i//3) + " " + str(j//3)] > 1:
            return False
    return True
  """  
  def board(self):

    id_x, id_y = 0, 0

    for x in range(3):
      for i in range(7):
        if (i == 0):
          for j in range(37):
            print("#", end='')
          print()

        elif i%2 == 0:
          for j in range(37):
            if j%12 == 0:
              print("#", end='')
            else:
              print("-", end='')
          print()
        
        elif i%2 == 1:
          for j in range(37):
            if j%12 == 0:
              print("#", end='')

            elif j != 1 and j%4==0:
              print("|", end='')

            else:
              #print("id", id_x)
              if self.grid[id_y][id_x] != '.' and j%2 == 0:
                print(self.grid[id_y][id_x], end='')
                id_x += 1

              elif j%2==0:
                id_x += 1
                print(" ", end='')

              else:
                print(" ", end='')
              
              if id_x > 8:
                id_x = 0
          print()
          id_x = 0
          id_y += 1

    for j in range(37):
          print("#", end='')
    print()


    


  def is_end_game(self):
    check = defaultdict(int)
    for i in range(len(self.grid)):
      for j in range(len(self.grid)):
        if self.grid[i][j] == '.':
          return False
    return True


  def check_game(self, n, i,j):
    for k in range(len(self.grid)):
      if self.grid[i][k] == n:
        return False 

    for k in range(len(self.grid)):
      if self.grid[k][j] == n:
        return False 

    i_ = 3*(i//3)
    j_ = 3*(j//3)
    for k in range(i_, i_+3):
      for l in range(j_, j_+3):
        if self.grid[k][l] == n:
          return False 
    
    return True

    
  def isValid(self, position):
    if position == 81:
      return True

    i = position//9
    j = position%9


    if self.grid[i][j] != ".":
      return self.isValid(position+1)


    for n in range(1,10):
      
      if self.check_game(str(n),i,j):
        self.grid[i][j] = str(n)
        
        #self.board()
        #time.sleep(1)
        if self.isValid(position+1):
          return True
    
    self.grid[i][j] = "."

    return False



  def game_running(self):
    run = True
    while run:
      print()
      print()
      self.board()
      print()
      
      quit = input('enter "x" if you want to leave : ') 
      if quit == "x":
        run = False
        break

      ans = input("Enter your number : ")
      row = int(input("Row (1-9) : "))
      column = int(input("Column (1-9 : "))

      if self.grid[row-1][column-1] != '.':
        print("Wrong")
      else: 
        self.grid[row-1][column-1] = ans
        if not self.check_game():
          print("Wrong")
          self.grid[row-1][column-1] = "."

      if self.is_end_game():
        print("Sudoku accompli")
        run = False
        break



def main():
  new_Sudoku = Sudoku()
  new_Sudoku.intro()
  #new_Sudoku.game_running()
  new_Sudoku.isValid(0)
  new_Sudoku.board()



main()